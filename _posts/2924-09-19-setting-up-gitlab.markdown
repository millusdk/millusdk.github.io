---
layout: post
title:  "Setting up Gitlab in a homelab with HTTPS, certbot and Cloudflare"
date:   2024-09-19 07:00:00 +0200
categories: gitlab proxmox
---
I want to start experimenting with Kubernetes and CI/CD workflows. In order to do this, I need a place to store code and configurations for these experiments.
I could store these on Github, however I would like the complete system architecture to be as self-contained as possible.

There are a number of different free applications that can handle storing the code and configuration, however I would like a solution that is free to use, allows for running CI/CD workflows and integrates well with Kubernetes. Because of this I have chosen to look at Gitlab, as I have experience using that from work.

At home I have a small homelab consiting of two Intel NUC's running Proxmox and a Truenas Core server that I use for backups and off-host storage, such as for ISO's and container images for Proxmox.

## Installing prerequisites

{% highlight bash %}
sudo apt-get update
{% endhighlight %}

{% highlight bash %}
sudo apt-get install -y curl openssh-server ca-certificates tzdata perl
{% endhighlight %}

## Installing Gitlab

{% highlight bash %}
curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash
{% endhighlight %}

{% highlight bash %}
sudo EXTERNAL_URL="<domain name for Gitlab>" apt-get install gitlab-ee
{% endhighlight %}

Output the autogenerated password from Gitlab

{% highlight bash %}
tail /etc/gitlab/initial_root_password
{% endhighlight %}

## Enabling HTTPS
By default Gitlab uses a self-signed certificate, unless the server is gloablly routable on the domain name you have configured.
This can cause issues if you want to use Gitlab CI/CD, as you will need to install this certificate no all runners, or they won't be able to connect.

Personally I use Certbot along with LetsEncrypt and Cloudflare to generate a certificate that is globally trusted.

### Install and configure certbot and Cloudflare  integrations
First we install Certbot.
{% highlight bash %}
sudo apt install certbot
{% endhighlight %}

Secondly we create the directory where certbot will store the cerificates that it generates
{% highlight bash %}
sudo mkdir -p /var/www/letsencrypt
{% endhighlight %}

And finally we install the integration between Cloudflare and certbot:
{% highlight bash %}
sudo apt-get install python3-certbot-dns-cloudflare
{% endhighlight %}

Once certbot has been installed along with the Cloudflare integration, we need to setup and configure integration.
To do this, we need to create an API Token for cloudflare and store it locally on the server.

It is important to keep this token safe, as it can be used to make API calls to Cloudflares servers.

First we create a folder to store the API Token in:
{% highlight bash %}
sudo mkdir -p /root/.secrets/
{% endhighlight %}

Next we store the token in a cloudflare.ini file in the new folder:
{% highlight bash %}
ECHO "dns_cloudflare_api_token = <Your API token>" > /root/.secrets/cloudflare.ini
{% endhighlight %}

Now we can test if we are able to retrieve a certificate from LetsEncrypt, and we can then later use that to configure Gitlab.
{% highlight bash %}
sudo certbot certonly --dns-cloudflare --dns-cloudflare-credentials /root/.secrets/cloudflare.ini -d "<domain name for Gitlab>."
{% endhighlight %}

### Configure Gitlab to use LetsEncrypt certificate
Once we have created the first certificate, we can configure Gitlab to use this for HTTPS.

In the configuration file for Gitlab, find the lines containing `nginx['ssl_certificate']` and `nginx['ssl_certificate_key']`.

Uncomment the lines, and update their content to the following:

{% highlight bash %}
nginx['ssl_certificate'] = "/etc/letsencrypt/live/<domain name for Gitlab>/fullchain.pem"
nginx['ssl_certificate_key'] = "/etc/letsencrypt/live/<domain name for Gitlab>/privkey.pem"
{% endhighlight %}

Finally, we need to reconfigure Gitlab, causing it to load and use the new certificate:
{%highlight bash %}
sudo gitlab-ctl reconfigure
{% endhighlight %}

### Setup a schedule for certbot to automatically renew the certificate
Certificates from LetsEncrypt have a short lifetime, as such, they will need to be renewed regularly.

We can setup a schedule for this, automatically renewing the certificate at regular intervals, stopping and starting Gitlab when the renewal happens.

## Next steps
The next steps from here will be:
- Setup CI/CD runners in Gitlab allowing for the executions of CI/CD workflows
- Setup Kubernets cluster
- Setup Flux and connect to Gitlab and Kubernetes allowing for deployments to the cluster