---
layout: post
title:  "Setting up Gitlab in a homelab with HTTPS, certbot and Cloudflare"
date:   2024-09-19 07:00:00 +0200
categories: gitlab proxmox homelab
---
I want to start experimenting with Kubernetes and CI/CD workflows. In order to do this, I need a place to store code and configurations for these experiments.
I could store these on Github, however I would like the complete system architecture to be as self-contained as possible.

There are a number of different free applications that can handle storing the code and configuration, however I would like a solution that is free to use, allows for running CI/CD workflows and integrates well with Kubernetes. Because of this I have chosen to look at Gitlab, as I have experience using that from work.

At home I have a small homelab consisting of two Intel NUCs running Proxmox and a TrueNAS Core server that I use for backups and off-host storage, such as for ISO's and container images for Proxmox.

One of the features I like about Proxmox is the ability to run LXC containers, which are similar in nature to a lightweight VM or Docker container, but unlike Docker containers, they are persistent and have persistent storage, making them ideal for running Gitlab, as the data entered into Gitlab, ie. the content of the repositories themselves, need to be stored and maintained across reboots of the container and the host system, something that would require a persistent volume in Docker.

## Setting up the LXC container
As the base for my Gitlab container I have chosen Ubuntu 22.04, as this is the same base system I use for other LXC containers that I make, and I am familiar with the apt based package management used by Ubuntu.

### Defining the container
Gitlab's recommendations for a normal installation is 8 vCPU's and 16GB of memory[^1]. However, since this system is designed for very few users, *ME*, I have chosen to look at the specs for a memory constrained deployment[^2], and beefed those up a little bit. As such I have chosen to create one with the following specifications:

| CPU cores | Memory | Storage |
|-----------|--------|---------|
| 2 vCores  | 8 GB   | 64 GB   |

In addition I have set it up to use a static IP-address, meaning that I can point my DNS provider directly at it. Internally I run a dual Pihole setup, with one running on each of my NUCs, and using gravity-sync to keep them synced up.

## Installing prerequisites
Once the LXC container has been set up and is ready for use, we need to install some prerequisites for Gitlab, but first we need to ensure that we have the latest data for apt:

{% highlight bash %}
sudo apt update
{% endhighlight %}

Once apt has been updated with the latest data, we can start installing the prerequisites for Gitlab. We can do that quickly with a simple command:

{% highlight bash %}
sudo apt install -y curl openssh-server ca-certificates tzdata perl
{% endhighlight %}

## Installing Gitlab

Once the prerequisites are installed we are ready to start installing Gitlab. To make it easy, Gitlab have made a script that adds their installer to apt, making it incredibly easy to install it. This script can be executed easily like this:

{% highlight bash %}
curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash
{% endhighlight %}

> **CAUTION:**  Executing scripts directly from the internet is generally not recommended! You should always download and check what the script does before executing it.

Once the script has run we are able to install Gitlab. We can set the external URL for Gitlab when installing by setting it as temporary environment variable:

{% highlight bash %}
sudo EXTERNAL_URL="<domain name for Gitlab>" apt install gitlab-ee
{% endhighlight %}

> **NOTE:** You should replace *\<domain name for Gitlab>* with the domain name you want to use for your Gitlab instance

Gitlab automatically generates a long password for the root user during installation. This password is stored for approximately 24 hours in a temporary. We can output the autogenerated password to the console using this simple command:

{% highlight bash %}
tail /etc/gitlab/initial_root_password
{% endhighlight %}

## Enabling HTTPS
By default Gitlab uses a self-signed certificate, unless the server is globally routeable on the domain name you have configured, which mine isn't.
This can cause issues if you want to use Gitlab CI/CD, as you will need to install this certificate no all runners, or they won't be able to connect.

Because I don't want to install the self-signed certificate on any CI/CD runners I set up, and because it has a short lifetime, I will install Certbot and use that along with LetsEncrypt and Cloudflare to generate a certificate that is trusted.

### Install and configure Certbot and Cloudflare  integrations
First we install Certbot.
{% highlight bash %}
sudo apt install certbot
{% endhighlight %}

Secondly we create the directory where certbot will store the certificates that it generates
{% highlight bash %}
sudo mkdir -p /var/www/letsencrypt
{% endhighlight %}

And finally we install the integration between Cloudflare and certbot:
{% highlight bash %}
sudo apt install python3-certbot-dns-cloudflare
{% endhighlight %}

Once certbot has been installed along with the Cloudflare integration, we need to setup and configure integration.
To do this, we need to create an API Token for cloudflare and store it locally on the server.

It is important to keep this token safe, as it can be used to make API calls to Cloudflare's servers.

First we create a folder to store the API Token in:
{% highlight bash %}
sudo mkdir -p /root/.secrets/
{% endhighlight %}

Next we store the token in a cloudflare.ini file in the new folder:
{% highlight bash %}
ECHO "dns_cloudflare_api_token = <Your API token>" > /root/.secrets/cloudflare.ini
{% endhighlight %}

Now we can test if we are able to retrieve a certificate from LetsEncrypt, and we can then later use that to configure Gitlab.
{% highlight bash %}
sudo certbot certonly --dns-cloudflare --dns-cloudflare-credentials /root/.secrets/cloudflare.ini -d "<domain name for Gitlab>."
{% endhighlight %}

### Configure Gitlab to use LetsEncrypt certificate
Once we have created the first certificate, we can configure Gitlab to use this for HTTPS.

In the configuration file for Gitlab, find the lines containing `nginx['ssl_certificate']` and `nginx['ssl_certificate_key']`.

Uncomment the lines, and update their content to the following:

{% highlight bash %}
nginx['ssl_certificate'] = "/etc/letsencrypt/live/<domain name for Gitlab>/fullchain.pem"
nginx['ssl_certificate_key'] = "/etc/letsencrypt/live/<domain name for Gitlab>/privkey.pem"
{% endhighlight %}

Finally, we need to reconfigure Gitlab, causing it to load and use the new certificate:
{%highlight bash %}
sudo gitlab-ctl reconfigure
{% endhighlight %}

### Setup a schedule for certbot to automatically renew the certificate
Certificates from LetsEncrypt have a short lifetime, as such, they will need to be renewed regularly.

We can setup a schedule for this, automatically renewing the certificate at regular intervals, stopping and starting Gitlab when the renewal happens.

## Next steps
The next steps from here will be:
- Setup CI/CD runners in Gitlab allowing for the executions of CI/CD workflows
- Setup Kubernetes cluster
- Setup Flux and connect to Gitlab and Kubernetes allowing for deployments to the cluster

[^1]: [Installation system requirements](https://docs.gitlab.com/ee/install/requirements.html)
[^2]: [Running GitLab in a memory-constrained environment](https://docs.gitlab.com/omnibus/settings/memory_constrained_envs.html)